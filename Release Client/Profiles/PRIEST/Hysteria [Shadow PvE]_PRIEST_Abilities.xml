<?xml version="1.0" encoding="utf-8" ?><PRIEST><Ability><Name>[Misc] Profile Init</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>------------------------------------------------------------
-- Variables &amp; Sanity checks
------------------------
-- PQInterface
if not IsAddOnLoaded(&amp;quot;PQInterface&amp;quot;) then
		PQR_WriteToChat(&amp;quot;|cff9482C9The AddOn PQInterface is not loaded or installed!|cffffffff&amp;quot;,&amp;quot;Warning&amp;quot;)
		PQR_WriteToChat(&amp;quot;|cff9482C9Version 2.22+ is required to run the profile.|cffffffff&amp;quot;,&amp;quot;Warning&amp;quot;)
		PQR_WriteToChat(&amp;quot;&amp;quot;)
		PQR_WriteToChat(&amp;quot;|cff9482C9You can get the latest version at this location:|cffffffff&amp;quot;,&amp;quot;Notice&amp;quot;)
		PQR_WriteToChat(&amp;quot;|cff9482C9http://pqrotation.wikia.com/wiki/PQInterface|cffffffff&amp;quot;,&amp;quot;Notice&amp;quot;)
		PQR_StopRotation()
		return true
else
	local PQIver = tonumber(GetAddOnMetadata(&amp;quot;PQInterface&amp;quot;,&amp;quot;Version&amp;quot;))
	if PQIver &amp;lt; 2.22 then
		PQR_WriteToChat(&amp;quot;|cff9482C9Your PQInterface version is outdated!|cffffffff&amp;quot;,&amp;quot;Warning&amp;quot;)
		PQR_WriteToChat(&amp;quot;|cff9482C9Version 2.22+ is required to run the profile, you have version &amp;quot;..PQIver..&amp;quot;!|cffffffff&amp;quot;,&amp;quot;Warning&amp;quot;)
		PQR_WriteToChat(&amp;quot;&amp;quot;)
		PQR_WriteToChat(&amp;quot;|cff9482C9You can get the latest version at this location:|cffffffff&amp;quot;,&amp;quot;Notice&amp;quot;)
		PQR_WriteToChat(&amp;quot;|cff9482C9http://pqrotation.wikia.com/wiki/PQInterface|cffffffff&amp;quot;,&amp;quot;Notice&amp;quot;)
		PQR_StopRotation()
		return true
	end
end

-- Initialize Load-Once Settings
if PQR_RotationStarted then
	PQR_RotationStarted = false

	-- Load Data Files
	if PQR_LoadLua ~= nil then
		if PQR_LoadLua(&amp;quot;PQR_Hysteria_Data.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;|cffb73737PQR_Hysteria_Data.lua failed to load. Make sure it&amp;apos;s in your Data folder!|cffffffff&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true
		end
		if PQR_LoadLua(&amp;quot;PQR_PQI.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;|cffb73737PQR_PQI.lua failed to load. Make sure it&amp;apos;s in your Data folder!|cffffffff&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true
		end
	end
	
	if not mentallyShadowFirstStart then
		-- Initialize Event Tracker
		local Hysteria = CreateFrame(&amp;quot;Frame&amp;quot;)
		Hysteria:RegisterEvent(&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;)
		Hysteria:SetScript(&amp;quot;OnEvent&amp;quot;, HysteriaFrame_OnEvent)
		Hysteria:Show()
		
		-- Shadow Settings
		Trinket = 0
		flayTicks = 0
		maxFlayTicks = 3
		insanityTicks = 0
		maxInsanityTicks = 3
		
		-- Initialize Dot Tracker
		if not dotTracker then dotTracker = {} end
		
		mentallyShadowFirstStart = true
		PQR_WriteToChat(&amp;quot;|cffffffffHysteria Shadow Priest data is |cff82cee7Loaded!|cffffffff&amp;quot;)
	end
end

-- Slash Command Queue
SLASH_ecast1 = &amp;quot;/ecast&amp;quot;
function SlashCmdList.ecast(ecast, editbox)
	if tonumber(ecast) ~= nil then PQ_QueuedSpell = ecast
		else print(&amp;quot;You can only pass a spell ID to /ecast!&amp;quot;) end
end

-- Initialize Variables
PQR_ResetMovementTime = 0.3
isCleave = strmatch(PQR_RotationName, &amp;quot;Cleave&amp;quot;)
PQR_SpellAvailableTime = ((select(3,GetNetStats()) + select(4,GetNetStats())) / 1000)

-- Initialize Trinkets
local itemCheck = itemCheck
local visionTrinket = visionTrinket
if itemCheck(visionTrinket) == 1 then UVLS = true else UVLS = false end


------------------------------------------------------------
-- Misc. Checks
------------------------
-- Reset DoT Tracker if we&amp;apos;re not in combat
if not UnitAffectingCombat(&amp;quot;player&amp;quot;) and #dotTracker &amp;gt; 0 then
	dotTracker = {}
end

-- Halt or Stop the profile under certain conditions
if IsMounted() then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Spell Queue System</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQI_MentallyOffensiveSettings_SpellQueueType_enable then return false end
local v=PQI_MentallyOffensiveSettings_SpellQueueType_value or 1

if v == 1 then
	if IsMouseButtonDown() and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
		if GetMouseFocus():GetName() ~= nil then
			SpellCancelQueuedSpell()
			RunMacroText(&amp;quot;/click &amp;quot;..GetMouseFocus():GetName())
		end
	end
elseif v == 2 then
	if GetMouseFocus():GetName() ~= nil and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
		SpellCancelQueuedSpell()
		RunMacroText(&amp;quot;/click &amp;quot;..GetMouseFocus():GetName())
	end
else
	if PQ_QueuedSpell ~= nil then
		if PQR_SpellAvailable(PQ_QueuedSpell) and IsPlayerSpell(PQ_QueuedSpell) then
			if lastSpell and lastSpell == PQ_QueuedSpell then
				PQ_QueuedSpell = nil lastSpell = nil return true
			end
			
			SpellCancelQueuedSpell()
			CastSpellByName(GetSpellInfo(PQ_QueuedSpell),nil)
			lastSpell = PQ_QueuedSpell
			return true
		end
		PQ_QueuedSpell = nil
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Hold: Pause Rotation</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQI_MentallyDefensiveSettings_PauseRotation_enable then return false end

if PQI:IsHotkeys(PQI_MentallyDefensiveSettings_PauseRotation_key)
	and not GetCurrentKeyBoardFocus() then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Combat Detection</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQI_MentallyOffensiveSettings_CombatDetection_enable then return false end

if (not UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;))
	or not UnitAffectingCombat(&amp;quot;player&amp;quot;)
then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Automatic Buffing</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>------------------------------------------------------------
-- Automatic Buffing.
------------------------
local PQ_IF = PQ_IF
local PQ_PWF = PQ_PWF
local PQ_SForm = PQ_SForm
local PQ_AuraInfo = PQ_AuraInfo

if UnitCastingInfo(&amp;quot;player&amp;quot;) or UnitChannelInfo(&amp;quot;player&amp;quot;) then return false end

-- Shadow Form
if IsPlayerSpell(PQ_SForm) and not UnitBuffID(&amp;quot;player&amp;quot;,PQ_SForm) then
	CastSpellByName(GetSpellInfo(PQ_SForm),&amp;quot;player&amp;quot;) return true
end

-- Inner Fire
if IsPlayerSpell(PQ_IF) and not UnitBuffID(&amp;quot;player&amp;quot;,PQ_IF) then
	CastSpellByName(GetSpellInfo(PQ_IF),&amp;quot;player&amp;quot;) return true
end

if UnitAffectingCombat(&amp;quot;player&amp;quot;) then return false end

-- Power Word Fortitude
if IsPlayerSpell(PQ_PWF) and not PQ_AuraInfo(2,&amp;quot;player&amp;quot;) then
	CastSpellByName(GetSpellInfo(PQ_PWF),&amp;quot;player&amp;quot;) return true
end

-- Dark Intent: Raid Buffing
if PQI_MentallyDefensiveSettings_RaidBuffing_enable then
	if IsInRaid() then group = &amp;quot;raid&amp;quot;
		elseif IsInGroup() then group = &amp;quot;party&amp;quot;
	else return false end
	
	for i=1,GetNumGroupMembers() do
		local member = group..i
		if not PQ_AuraInfo(2,member) and IsSpellInRange(GetSpellInfo(PQ_PWF),member) == 1 then
			if UnitIsDeadOrGhost(member) then return false end
			if PQR_IsOutOfSight(member,1) then return false end
			
			CastSpellByName(GetSpellInfo(PQ_PWF),member) return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Auto: Potion</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local T2D = T2D
local PQ_HasHero = PQ_HasHero
local SpecialUnit = SpecialUnit

-- Don&amp;apos;t use Potion during Heroism if user tagged off automatic use
if not PQI_MentallyOffensiveSettings_AutoPotion_enable then return false end

-- Disable if we have no potions left
if GetItemCount(76093) &amp;lt; 1 then return false end

-- Disable if Potion is on cooldown
if GetItemCooldown(76093) ~= 0 then return false end

-- Disable if we&amp;apos;re not targeting a boss
if not SpecialUnit() then return false end

-- Disable if we don&amp;apos;t have Heroism or T2D is greater than 20 seconds
if not PQ_HasHero() or T2D(&amp;quot;target&amp;quot;) &amp;gt; 20 then return false end

-- At this point, we should just use the potion if all of the above is true
UseItemByName(76093)</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Boss Immunities</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Let&amp;apos;s try and detect immunities
if UnitBuffID(&amp;quot;target&amp;quot;,116994) or UnitBuffID(&amp;quot;target&amp;quot;,122540) or UnitBuffID(&amp;quot;target&amp;quot;,123250) or UnitBuffID(&amp;quot;target&amp;quot;,106062) or UnitBuffID(&amp;quot;target&amp;quot;,110945)
	then return false end
	
-- Cancel spell casts or channels on Silences
if UnitExists(&amp;quot;boss1&amp;quot;) or UnitExists(&amp;quot;target&amp;quot;) then
	if UnitCastingInfo(&amp;quot;boss1&amp;quot;) == GetSpellInfo(138763) or UnitCastingInfo(&amp;quot;target&amp;quot;) == GetSpellInfo(137457) then
		if UnitCastingInfo(&amp;quot;player&amp;quot;) or UnitChannelInfo(&amp;quot;player&amp;quot;) then RunMacroText(&amp;quot;/stopcasting&amp;quot;) return false end
		return true
	end
end
	
-- Twin Consorts (Immune while channeling Nuclear Inferno and Tidal Force)
if UnitChannelInfo(&amp;quot;target&amp;quot;) == GetSpellInfo(137531) or UnitChannelInfo(&amp;quot;target&amp;quot;) == GetSpellInfo(137491) or UnitCastingInfo(&amp;quot;target&amp;quot;) == GetSpellInfo(138763)
	then return false end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Auto: Frag Belt</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQI_MentallyOffensiveSettings_AutoFragBelt_enable then return false end

-- If we don&amp;apos;t know Engineering. Don&amp;apos;t activate.
for i=1,9 do
	if select(7,GetProfessionInfo(i)) == 202 then hasEngi = true end
end

-- Don&amp;apos;t have Engineering.
if not hasEngi then return false end

local Belt = GetInventoryItemID(&amp;quot;player&amp;quot;, 6)

-- Not equipped?
if not IsEquippedItem(Belt) then return false end

-- Don&amp;apos;t use it in Caster form
if GetShapeshiftForm(&amp;quot;player&amp;quot;) == 0 then return false end

-- Don&amp;apos;t use it if it&amp;apos;s on cooldown as well!
if GetItemCooldown(Belt) &amp;gt; 0 then return false end

if GetCurrentKeyBoardFocus() == nil and UnitIsUnit(&amp;quot;target&amp;quot;, &amp;quot;mouseover&amp;quot;) then
	UseItemByName(Belt)
	if SpellIsTargeting() then CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Healthstone</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Disable ability if we disabled it in PQI
if not PQI_MentallyDefensiveSettings_Healthstone_enable then return false end

local v=PQI_MentallyDefensiveSettings_Healthstone_value

if GetItemCount(5512) &amp;gt; 0
	and Hysteria_UnitInfo(&amp;quot;player&amp;quot;) &amp;lt;= v
	and PQR_SpellAvailable(5512)
	and GetItemCooldown(5512) == 0
then UseItemByName(5512) return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Herbalism: Lifeblood</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SCD = SCD
local SpecialUnit = SpecialUnit

-- Herbalism&amp;apos;s Lifeblood
PQ_Lifeblood = {81708,74497,121279,55428,55480,55500,55501,55502,55503}

for i=1,#PQ_Lifeblood do
	if IsPlayerSpell(PQ_Lifeblood[i])
		and PQR_SpellAvailable(PQ_Lifeblood[i])
		and SpecialUnit()
		and not SCD
	then
		if not PQI_MentallyOffensiveSettings_BossCooldown_enable then
			CastSpellByName(GetSpellInfo(PQ_Lifeblood[i]),&amp;quot;player&amp;quot;)
			return true
		else
			if SpecialUnit() then
				CastSpellByName(GetSpellInfo(PQ_Lifeblood[i]),&amp;quot;player&amp;quot;)
				return true
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Auto: Racials</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SCD = SCD
local SpecialUnit = SpecialUnit
local Hysteria_UnitInfo = Hysteria_UnitInfo

-- Don&amp;apos;t use Racials if user tagged off automatic use
if not PQI_MentallyOffensiveSettings_AutoRacials_enable then return false end

-- Draenei: Gift of the Naaru
if IsPlayerSpell(59544) and PQR_SpellAvailable(59544) and Hysteria_UnitInfo(&amp;quot;player&amp;quot;) &amp;lt; 60 then
	CastSpellByName(GetSpellInfo(59544),&amp;quot;player&amp;quot;)
	return true
end

-- Troll: Berserking
if IsPlayerSpell(26297) and not SCD then
	if PQR_SpellAvailable(26297) then
		if not PQI_MentallyOffensiveSettings_BossCooldown_enable then
			if UnitExists(&amp;quot;target&amp;quot;) then
				SpellCancelQueuedSpell()
				CastSpellByName(GetSpellInfo(26297),&amp;quot;player&amp;quot;)
				return true
			end
		else
			if SpecialUnit() then
				SpellCancelQueuedSpell()
				CastSpellByName(GetSpellInfo(26297),&amp;quot;player&amp;quot;)
				return true
			end
		end
	end
end

-- Blood Elf: Arcane Torrent
if IsPlayerSpell(28730) and not SCD then
	if PQR_SpellAvailable(28730) and select(3,Hysteria_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt; 92
		and UnitExists(&amp;quot;target&amp;quot;) then
			SpellCancelQueuedSpell()
			CastSpellByName(GetSpellInfo(28730),&amp;quot;player&amp;quot;)
			return true
	end
end

-- Orc: Blood Fury
if IsPlayerSpell(33702) and not SCD then
	if PQR_SpellAvailable(33702) then
		if not PQI_MentallyOffensiveSettings_BossCooldown_enable then
			if UnitExists(&amp;quot;target&amp;quot;) then
				SpellCancelQueuedSpell()
				CastSpellByName(GetSpellInfo(33702),&amp;quot;player&amp;quot;)
				return true
			end
		else
			if SpecialUnit() then
				SpellCancelQueuedSpell()
				CastSpellByName(GetSpellInfo(33702),&amp;quot;player&amp;quot;)
				return true
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Fade</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_Fade = PQ_Fade

if not PQR_SpellAvailable(PQ_Fade) then return false end
if not PQI_MentallyDefensiveSettings_Fade_enable then return false end

if UnitThreatSituation(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) == 3 then
	CastSpellByName(GetSpellInfo(PQ_Fade),&amp;quot;player&amp;quot;) return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Body and Soul</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_Shield = PQ_Shield

if not IsPlayerSpell(64129) then return false end
if IsFalling() or IsFlying() then return false end
if not IsPlayerSpell(PQ_Shield) then return false end
if not PQR_SpellAvailable(PQ_Shield) then return false end
if not PQI_MentallyDefensiveSettings_BodyandSoul_enable then return false end

if not UnitDebuffID(&amp;quot;player&amp;quot;,6788) and PQR_IsMoving(0.3) then
	CastSpellByName(GetSpellInfo(PQ_Shield),&amp;quot;player&amp;quot;) return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Desperate Prayer</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_DPrayer = PQ_DPrayer
local Hysteria_UnitInfo = Hysteria_UnitInfo
local v=PQI_MentallyDefensiveSettings_DesperatePrayer_value or 40

if not IsPlayerSpell(PQ_DPrayer) then return false end
if not PQR_SpellAvailable(PQ_DPrayer) then return false end
if not PQI_MentallyDefensiveSettings_DesperatePrayer_enable then return false end

if Hysteria_UnitInfo(&amp;quot;player&amp;quot;) &amp;lt; v then
	CastSpellByName(GetSpellInfo(PQ_DPrayer),&amp;quot;player&amp;quot;) return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Mass Dispel (Mouseover)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_MDisp = PQ_MDisp

if not PQR_SpellAvailable(PQ_MDisp) then return false end
if IsFalling() or PQR_IsMoving(0.1) or IsFlying() then return false end
if not PQI_MentallyDefensiveSettings_MassDispel_enable then return false end

if PQR_SpellAvailable(PQ_MDisp)
	and PQI:IsHotkeys(PQI_MentallyDefensiveSettings_MassDispel_key)
	and not GetCurrentKeyBoardFocus() then
		SpellCancelQueuedSpell()
		CastSpellByName(GetSpellInfo(PQ_MDisp),nil)
		if SpellIsTargeting() then SpellCancelQueuedSpell() CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end
		return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Symbiosis</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not UnitBuffID(&amp;quot;player&amp;quot;,110485) then return false end
if IsFalling() or PQR_IsMoving(0.1) or IsFlying() then return false end
if not PQI_MentallyDefensiveSettings_Symbiosis_enable then return false end

if PQR_SpellAvailable(113277)
	and PQI:IsHotkeys(PQI_MentallyDefensiveSettings_Symbiosis_key)
	and not GetCurrentKeyBoardFocus() then
		SpellCancelQueuedSpell() CastSpellByName(GetSpellInfo(113277),nil) return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Auto: Shadowfiend</Name><Default>false</Default><SpellID>0</SpellID><Actions>/use 10|/use 13|/use 14</Actions><Lua>local SCD = SCD
local PQ_SF = PQ_SF
local SpecialUnit = SpecialUnit
local TargetValidation = TargetValidation

-- Don&amp;apos;t auto-cast if we have it disabled
if not PQI_MentallyOffensiveSettings_AutoShadowfiend_enable then return false end

-- Properly clip Mind Flay / Insanity
if not smartCancel() then return false end
	
-- Cast Mindbender / Shadowfiend
if TargetValidation(&amp;quot;target&amp;quot;, PQ_SF) and not SCD then
	-- Cast on enemy units
	if UnitIsPlayer(&amp;quot;target&amp;quot;) and UnitIsEnemy(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) then
		CastSpellByName(GetSpellInfo(PQ_SF),&amp;quot;target&amp;quot;) return true
	end
	
	if PQI_MentallyOffensiveSettings_BossCooldown_enable then
		if SpecialUnit() then CastSpellByName(GetSpellInfo(PQ_SF),&amp;quot;target&amp;quot;) return true end
	else CastSpellByName(GetSpellInfo(PQ_SF),&amp;quot;target&amp;quot;) return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Auto: Power Infusion</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SCD = SCD
local PQ_MB = PQ_MB
local PQ_PI = PQ_PI
local SpecialUnit = SpecialUnit
local TargetValidation = TargetValidation

-- Don&amp;apos;t auto-cast if we have it disabled
if not IsPlayerSpell(PQ_PI) then return false end
if not PQR_SpellAvailable(PQ_PI) then return false end
if not PQI_MentallyOffensiveSettings_AutoPowerInfusion_enable then return false end

-- Properly clip Mind Flay / Insanity
if not smartCancel() then return false end
	
-- Cast Power Infusion
if TargetValidation(&amp;quot;target&amp;quot;, PQ_MB) and not SCD then
	if PQI_MentallyOffensiveSettings_BossCooldown_enable then
		if SpecialUnit() then CastSpellByName(GetSpellInfo(PQ_PI),&amp;quot;target&amp;quot;) return true end
	else CastSpellByName(GetSpellInfo(PQ_PI),&amp;quot;target&amp;quot;) return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Level 90 Talent</Name><Default>false</Default><SpellID>0</SpellID><Actions>/use 13|/use 14</Actions><Lua>local PQ_DP = PQ_DP
local PQ_SnI = PQ_SnI
local PQ_Star = PQ_Star
local PQ_Halo = PQ_Halo
local PQ_DStar = PQ_DStar
local PQ_Cascade = PQ_Cascade
local PQ_DCascade = PQ_DCascade
local PQ_DarkHalo = PQ_DarkHalo
local smartCancel = smartCancel

-- Don&amp;apos;t double tap if we have Solace &amp; Insanity
if IsPlayerSpell(PQ_SnI) then
	if UnitDebuffID(&amp;quot;target&amp;quot;,PQ_DP,&amp;quot;PLAYER&amp;quot;) then return false end
end

-- Properly clip Mind Flay / Insanity
if not smartCancel() then return false end

if PQI_MentallyOffensiveSettings_AutoLevel90Talent_enable then
	-- Halo
	if IsPlayerSpell(PQ_Halo) and PQR_SpellAvailable(PQ_DarkHalo) then
		CastSpellByName(GetSpellInfo(PQ_DarkHalo),&amp;quot;target&amp;quot;) return true
	end
	
	-- Divine Star
	if IsPlayerSpell(PQ_Star) and PQR_SpellAvailable(PQ_DStar) then
		CastSpellByName(GetSpellInfo(PQ_DStar),&amp;quot;target&amp;quot;) return true
	end
	
	-- Cascade
	if IsPlayerSpell(PQ_Cascade)
		and UnitExists(&amp;quot;target&amp;quot;)
		and PQR_SpellAvailable(PQ_DCascade)
		and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	then CastSpellByName(GetSpellInfo(PQ_DCascade),&amp;quot;target&amp;quot;) return true end
else
	-- If it&amp;apos;s disabled all together, return false.
	if not PQI_MentallyOffensiveSettings_Level90Talent_enable then return false end
	if not PQI:IsHotkeys(PQI_MentallyOffensiveSettings_Level90Talent_key) then return false end
	
	-- Halo
	if IsPlayerSpell(PQ_Halo)
		and PQR_SpellAvailable(PQ_DarkHalo)
		and PQI:IsHotkeys(PQI_MentallyOffensiveSettings_Level90Talent_key)
		and not GetCurrentKeyBoardFocus()
	then SpellCancelQueuedSpell() CastSpellByName(GetSpellInfo(PQ_DarkHalo),&amp;quot;target&amp;quot;) return true end
	
	-- Divine Star
	if IsPlayerSpell(PQ_Star)
		and PQR_SpellAvailable(PQ_DStar)
		and PQI:IsHotkeys(PQI_MentallyOffensiveSettings_Level90Talent_key)
		and not GetCurrentKeyBoardFocus()
	then SpellCancelQueuedSpell() CastSpellByName(GetSpellInfo(PQ_DStar),&amp;quot;target&amp;quot;) return true end
	
	-- Cascade
	if IsPlayerSpell(PQ_Cascade)
		and UnitExists(&amp;quot;target&amp;quot;)
		and PQR_SpellAvailable(PQ_DCascade)
		and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
		and PQI:IsHotkeys(PQI_MentallyOffensiveSettings_Level90Talent_key)
		and not GetCurrentKeyBoardFocus()
	then SpellCancelQueuedSpell() CastSpellByName(GetSpellInfo(PQ_DCascade),&amp;quot;target&amp;quot;) return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadow Word: Pain</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_SWP = PQ_SWP
local smartCancel = smartCancel
local mentallyPower = mentallyPower
local TargetValidation = TargetValidation
local SWP = select(7,UnitDebuffID(&amp;quot;target&amp;quot;,PQ_SWP,&amp;quot;PLAYER&amp;quot;))
local SWP2 = PQ_Round(PQ_PowerRound(18/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)

-- Shadow Word: Pain is not available
if not PQR_SpellAvailable(PQ_SWP) then return false end

-- Properly clip Mind Flay / Insanity
if not isCleave then
	if not smartCancel() then return false end
end

if TargetValidation(&amp;quot;target&amp;quot;,PQ_SWP) then
	local id = UnitGUID(&amp;quot;target&amp;quot;)
	
	if SWP then
		for i=1,#dotTracker do
			if dotTracker[i].guid == id and dotTracker[i].spellID == PQ_SWP then
				if UnitBuffID(&amp;quot;player&amp;quot;,138963) then
					if isCleave then CastSpellByName(GetSpellInfo(PQ_SWP),&amp;quot;target&amp;quot;) return true end
					
					if dotTracker[i].crit == false then CastSpellByName(GetSpellInfo(PQ_SWP),&amp;quot;target&amp;quot;) return true end
					if dotTracker[i].crit == true then
						if SWP - GetTime() &amp;lt;= SWP2 / 2 then
							CastSpellByName(GetSpellInfo(PQ_SWP),&amp;quot;target&amp;quot;) return true
						end
					end
				else
					if dotTracker[i].crit == false then
						if mentallyPower(589) &amp;gt; dotTracker[i].swpPower then
							if SWP - GetTime() &amp;lt;= SWP2 / 2 then
								CastSpellByName(GetSpellInfo(PQ_SWP),&amp;quot;target&amp;quot;) return true
							end
						end
						if SWP - GetTime() &amp;lt;= dotTracker[i].swp_tick_every then
							CastSpellByName(GetSpellInfo(PQ_SWP),&amp;quot;target&amp;quot;) return true
						end
					end
					if dotTracker[i].crit == true then
						if SWP - GetTime() &amp;lt;= dotTracker[i].swp_tick_every then
							CastSpellByName(GetSpellInfo(PQ_SWP),&amp;quot;target&amp;quot;) return true
						end
					end
				end

			end
		end
	else CastSpellByName(GetSpellInfo(PQ_SWP),&amp;quot;target&amp;quot;) return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadow Word: Pain (Mouseover)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_SWP = PQ_SWP
local smartCancel = smartCancel
local mentallyPower = mentallyPower
local TargetValidation = TargetValidation
local SWP = select(7,UnitDebuffID(&amp;quot;mouseover&amp;quot;,PQ_SWP,&amp;quot;PLAYER&amp;quot;))
local SWP2 = PQ_Round(PQ_PowerRound(18/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)

-- Shadow Word: Pain is not available
if not PQR_SpellAvailable(PQ_SWP) then return false end
if not PQI_MentallyOffensiveSettings_MouseoverDotting_enable then return false end

-- Properly clip Mind Flay / Insanity
if not isCleave then
	if not smartCancel() then return false end
end

if TargetValidation(&amp;quot;mouseover&amp;quot;,PQ_SWP) then
	local id = UnitGUID(&amp;quot;mouseover&amp;quot;)
	
	if SWP then
		for i=1,#dotTracker do
			if dotTracker[i].guid == id and dotTracker[i].spellID == PQ_SWP then
				if UnitBuffID(&amp;quot;player&amp;quot;,138963) then
					if dotTracker[i].crit == false then CastSpellByName(GetSpellInfo(PQ_SWP),&amp;quot;mouseover&amp;quot;) return true end
					if dotTracker[i].crit == true then
						if SWP - GetTime() &amp;lt;= SWP2 / 2 then
							CastSpellByName(GetSpellInfo(PQ_SWP),&amp;quot;mouseover&amp;quot;) return true
						end
					end
				else
					if dotTracker[i].crit == false then
						if mentallyPower(589) &amp;gt; dotTracker[i].swpPower then
							if SWP - GetTime() &amp;lt;= SWP2 / 2 then
								CastSpellByName(GetSpellInfo(PQ_SWP),&amp;quot;mouseover&amp;quot;) return true
							end
						end
						if SWP - GetTime() &amp;lt;= dotTracker[i].swp_tick_every then
							CastSpellByName(GetSpellInfo(PQ_SWP),&amp;quot;mouseover&amp;quot;) return true
						end
					end
					if dotTracker[i].crit == true then
						if SWP - GetTime() &amp;lt;= dotTracker[i].swp_tick_every then
							CastSpellByName(GetSpellInfo(PQ_SWP),&amp;quot;mouseover&amp;quot;) return true
						end
					end
				end

			end
		end
	else CastSpellByName(GetSpellInfo(PQ_SWP),&amp;quot;mouseover&amp;quot;) return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadow Word: Pain (Focus)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_SWP = PQ_SWP
local smartCancel = smartCancel
local mentallyPower = mentallyPower
local TargetValidation = TargetValidation
local SWP = select(7,UnitDebuffID(&amp;quot;focus&amp;quot;,PQ_SWP,&amp;quot;PLAYER&amp;quot;))
local SWP2 = PQ_Round(PQ_PowerRound(18/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)

-- Shadow Word: Pain is not available
if not PQR_SpellAvailable(PQ_SWP) then return false end
if not PQI_MentallyOffensiveSettings_FocusDotting_enable then return false end

-- Properly clip Mind Flay / Insanity
if not isCleave then
	if not smartCancel() then return false end
end

if TargetValidation(&amp;quot;focus&amp;quot;,PQ_SWP) then
	local id = UnitGUID(&amp;quot;focus&amp;quot;)
	
	if SWP then
		for i=1,#dotTracker do
			if dotTracker[i].guid == id and dotTracker[i].spellID == PQ_SWP then
				if UnitBuffID(&amp;quot;player&amp;quot;,138963) then
					if dotTracker[i].crit == false then CastSpellByName(GetSpellInfo(PQ_SWP),&amp;quot;focus&amp;quot;) return true end
					if dotTracker[i].crit == true then
						if SWP - GetTime() &amp;lt;= SWP2 / 2 then
							CastSpellByName(GetSpellInfo(PQ_SWP),&amp;quot;focus&amp;quot;) return true
						end
					end
				else
					if dotTracker[i].crit == false then
						if mentallyPower(589) &amp;gt; dotTracker[i].swpPower then
							if SWP - GetTime() &amp;lt;= SWP2 / 2 then
								CastSpellByName(GetSpellInfo(PQ_SWP),&amp;quot;focus&amp;quot;) return true
							end
						end
						if SWP - GetTime() &amp;lt;= dotTracker[i].swp_tick_every then
							CastSpellByName(GetSpellInfo(PQ_SWP),&amp;quot;focus&amp;quot;) return true
						end
					end
					if dotTracker[i].crit == true then
						if SWP - GetTime() &amp;lt;= dotTracker[i].swp_tick_every then
							CastSpellByName(GetSpellInfo(PQ_SWP),&amp;quot;focus&amp;quot;) return true
						end
					end
				end

			end
		end
	else CastSpellByName(GetSpellInfo(PQ_SWP),&amp;quot;focus&amp;quot;) return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadow Word: Pain (Boss)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_SWP = PQ_SWP
local smartCancel = smartCancel
local mentallyPower = mentallyPower
local TargetValidation = TargetValidation
local SWP2 = PQ_Round(PQ_PowerRound(18/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)

-- Shadow Word: Pain is not available
if not PQR_SpellAvailable(PQ_SWP) then return false end
if not PQI_MentallyOffensiveSettings_AutoBossDotting_enable then return false end

-- Properly clip Mind Flay / Insanity
if not isCleave then
	if not smartCancel() then return false end
end

for i=1,4 do
	local bossUnit = &amp;quot;boss&amp;quot;..i
	local SWP = select(7,UnitDebuffID(bossUnit,PQ_SWP,&amp;quot;PLAYER&amp;quot;))
	
	-- Let&amp;apos;s try and detect immunities
	if UnitBuffID(bossUnit,116994) or UnitBuffID(bossUnit,122540) or UnitBuffID(bossUnit,123250) or UnitBuffID(bossUnit,106062) or UnitBuffID(bossUnit,110945)
		then return false end
	
	if TargetValidation(bossUnit,PQ_SWP) then
		local id = UnitGUID(bossUnit)
		
		if SWP then
			for i=1,#dotTracker do
				if dotTracker[i].guid == id and dotTracker[i].spellID == PQ_SWP then
					if UnitBuffID(&amp;quot;player&amp;quot;,138963) then
						if isCleave then CastSpellByName(GetSpellInfo(PQ_SWP),bossUnit) return true end
						
						if dotTracker[i].crit == false then CastSpellByName(GetSpellInfo(PQ_SWP),bossUnit) return true end
						if dotTracker[i].crit == true then
							if SWP - GetTime() &amp;lt;= SWP2 / 2 then
								CastSpellByName(GetSpellInfo(PQ_SWP),bossUnit) return true
							end
						end
					else
						if dotTracker[i].crit == false then
							if mentallyPower(589) &amp;gt; dotTracker[i].swpPower then
								if SWP - GetTime() &amp;lt;= SWP2 / 2 then
									CastSpellByName(GetSpellInfo(PQ_SWP),bossUnit) return true
								end
							end
							if SWP - GetTime() &amp;lt;= dotTracker[i].swp_tick_every then
								CastSpellByName(GetSpellInfo(PQ_SWP),bossUnit) return true
							end
						end
						if dotTracker[i].crit == true then
							if SWP - GetTime() &amp;lt;= dotTracker[i].swp_tick_every then
								CastSpellByName(GetSpellInfo(PQ_SWP),bossUnit) return true
							end
						end
					end
				end
			end
		else CastSpellByName(GetSpellInfo(PQ_SWP),bossUnit) return true end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Vampiric Touch</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local PQ_VT = PQ_VT
local smartCancel = smartCancel
local mentallyPower = mentallyPower
local TargetValidation = TargetValidation
local Hysteria_CastCheck = Hysteria_CastCheck
local VT = select(7,UnitDebuffID(&amp;quot;target&amp;quot;,PQ_VT,&amp;quot;PLAYER&amp;quot;))
local VT2 = PQ_Round(PQ_PowerRound(18/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)

-- Shadow Word: Pain is not available
if not PQR_SpellAvailable(PQ_VT) then return false end

-- Properly clip Mind Flay / Insanity
if not isCleave then
	if not smartCancel() then return false end
end

if TargetValidation(&amp;quot;target&amp;quot;,PQ_VT) then
	local id = UnitGUID(&amp;quot;target&amp;quot;)
	
	if VT then
		for i=1,#dotTracker do
			if dotTracker[i].guid == id and dotTracker[i].spellID == PQ_VT then
				if UnitBuffID(&amp;quot;player&amp;quot;,138963) then
					if isCleave then return false end
					if Hysteria_CastCheck(PQ_VT, 138963) then return false end
					if dotTracker[i].crit == false then
						CastSpellByName(GetSpellInfo(PQ_VT),&amp;quot;target&amp;quot;) return true
					end
					if dotTracker[i].crit == true then
						if VT - GetTime() &amp;lt;= VT2 / 2 then
							CastSpellByName(GetSpellInfo(PQ_VT),&amp;quot;target&amp;quot;) return true
						end
					end
				else
					if dotTracker[i].crit == false then
						if mentallyPower(34914) &amp;gt; dotTracker[i].vtPower then
							if VT - GetTime() &amp;lt;= VT2 / 2 then
								CastSpellByName(GetSpellInfo(PQ_VT),&amp;quot;target&amp;quot;) return true
							end
						end
						if VT - GetTime() &amp;lt;= dotTracker[i].vt_tick_every then
							CastSpellByName(GetSpellInfo(PQ_VT),&amp;quot;target&amp;quot;) return true
						end
					end
					if dotTracker[i].crit == true then
						if VT - GetTime() &amp;lt;= dotTracker[i].vt_tick_every then
							CastSpellByName(GetSpellInfo(PQ_VT),&amp;quot;target&amp;quot;) return true
						end
					end
				end
			end
		end
	else CastSpellByName(GetSpellInfo(PQ_VT),&amp;quot;target&amp;quot;) return true end
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Vampiric Touch (Focus)</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local PQ_VT = PQ_VT
local smartCancel = smartCancel
local mentallyPower = mentallyPower
local TargetValidation = TargetValidation
local VT = select(7,UnitDebuffID(&amp;quot;focus&amp;quot;,PQ_VT,&amp;quot;PLAYER&amp;quot;))
local VT2 = PQ_Round(PQ_PowerRound(18/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)

-- Shadow Word: Pain is not available
if not PQR_SpellAvailable(PQ_VT) then return false end
if not PQI_MentallyOffensiveSettings_FocusDotting_enable then return false end

-- Properly clip Mind Flay / Insanity
if not isCleave then
	if not smartCancel() then return false end
end

if TargetValidation(&amp;quot;focus&amp;quot;,PQ_VT) then
	local id = UnitGUID(&amp;quot;focus&amp;quot;)
	
	if VT then
		for i=1,#dotTracker do
			if dotTracker[i].guid == id and dotTracker[i].spellID == PQ_VT then
				if UnitBuffID(&amp;quot;player&amp;quot;,138963) then
					if isCleave then return false end
					if dotTracker[i].crit == false then
						CastSpellByName(GetSpellInfo(PQ_VT),&amp;quot;focus&amp;quot;) return true
					end
					if dotTracker[i].crit == true then
						if VT - GetTime() &amp;lt;= VT2 / 2 then
							CastSpellByName(GetSpellInfo(PQ_VT),&amp;quot;focus&amp;quot;) return true
						end
					end
				else
					if dotTracker[i].crit == false then
						if mentallyPower(34914) &amp;gt; dotTracker[i].vtPower then
							if VT - GetTime() &amp;lt;= VT2 / 2 then
								CastSpellByName(GetSpellInfo(PQ_VT),&amp;quot;focus&amp;quot;) return true
							end
						end
						if VT - GetTime() &amp;lt;= dotTracker[i].vt_tick_every then
							CastSpellByName(GetSpellInfo(PQ_VT),&amp;quot;focus&amp;quot;) return true
						end
					end
					if dotTracker[i].crit == true then
						if VT - GetTime() &amp;lt;= dotTracker[i].vt_tick_every then
							CastSpellByName(GetSpellInfo(PQ_VT),&amp;quot;focus&amp;quot;) return true
						end
					end
				end
			end
		end
	else CastSpellByName(GetSpellInfo(PQ_VT),&amp;quot;focus&amp;quot;) return true end
end</Lua><RecastDelay>500</RecastDelay><Target>Focus</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Vampiric Touch (Mouseover)</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local PQ_VT = PQ_VT
local smartCancel = smartCancel
local mentallyPower = mentallyPower
local TargetValidation = TargetValidation
local VT = select(7,UnitDebuffID(&amp;quot;mouseover&amp;quot;,PQ_VT,&amp;quot;PLAYER&amp;quot;))
local VT2 = PQ_Round(PQ_PowerRound(18/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)

-- Shadow Word: Pain is not available
if not PQR_SpellAvailable(PQ_VT) then return false end
if not PQI_MentallyOffensiveSettings_MouseoverDotting_enable then return false end

-- Properly clip Mind Flay / Insanity
if not isCleave then
	if not smartCancel() then return false end
end

if TargetValidation(&amp;quot;mouseover&amp;quot;,PQ_VT) then
	local id = UnitGUID(&amp;quot;mouseover&amp;quot;)
	
	if VT then
		for i=1,#dotTracker do
			if dotTracker[i].guid == id and dotTracker[i].spellID == PQ_VT then
				if UnitBuffID(&amp;quot;player&amp;quot;,138963) then
					if isCleave then return false end
					if dotTracker[i].crit == false then
						CastSpellByName(GetSpellInfo(PQ_VT),&amp;quot;mouseover&amp;quot;) return true
					end
					if dotTracker[i].crit == true then
						if VT - GetTime() &amp;lt;= VT2 / 2 then
							CastSpellByName(GetSpellInfo(PQ_VT),&amp;quot;mouseover&amp;quot;) return true
						end
					end
				else
					if dotTracker[i].crit == false then
						if mentallyPower(34914) &amp;gt; dotTracker[i].vtPower then
							if VT - GetTime() &amp;lt;= VT2 / 2 then
								CastSpellByName(GetSpellInfo(PQ_VT),&amp;quot;mouseover&amp;quot;) return true
							end
						end
						if VT - GetTime() &amp;lt;= dotTracker[i].vt_tick_every then
							CastSpellByName(GetSpellInfo(PQ_VT),&amp;quot;mouseover&amp;quot;) return true
						end
					end
					if dotTracker[i].crit == true then
						if VT - GetTime() &amp;lt;= dotTracker[i].vt_tick_every then
							CastSpellByName(GetSpellInfo(PQ_VT),&amp;quot;mouseover&amp;quot;) return true
						end
					end
				end
			end
		end
	else CastSpellByName(GetSpellInfo(PQ_VT),&amp;quot;mouseover&amp;quot;) return true end
end</Lua><RecastDelay>500</RecastDelay><Target>Mouseover</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Vampiric Touch (Boss)</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local PQ_VT = PQ_VT
local smartCancel = smartCancel
local mentallyPower = mentallyPower
local TargetValidation = TargetValidation
local VT2 = PQ_Round(PQ_PowerRound(18/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)

-- Shadow Word: Pain is not available
if not PQR_SpellAvailable(PQ_VT) then return false end
if not PQI_MentallyOffensiveSettings_AutoBossDotting_enable then return false end

-- Properly clip Mind Flay / Insanity
if not isCleave then
	if not smartCancel() then return false end
end

for i=1,4 do
	local bossUnit = &amp;quot;boss&amp;quot;..i
	PQR_CustomTarget = bossUnit
	local VT = select(7,UnitDebuffID(bossUnit,PQ_VT,&amp;quot;PLAYER&amp;quot;))
	
	-- Let&amp;apos;s try and detect immunities
	if UnitBuffID(bossUnit,116994) or UnitBuffID(bossUnit,122540) or UnitBuffID(bossUnit,123250) or UnitBuffID(bossUnit,106062) or UnitBuffID(bossUnit,110945)
		then return false end
	
	if TargetValidation(bossUnit,PQ_VT) then
		local id = UnitGUID(bossUnit)
		
		if VT then
			for i=1,#dotTracker do
				if dotTracker[i].guid == id and dotTracker[i].spellID == PQ_VT then
					if UnitBuffID(&amp;quot;player&amp;quot;,138963) then
						if isCleave then return false end
						if dotTracker[i].crit == false then
							CastSpellByName(GetSpellInfo(PQ_VT),bossUnit) return true
						end
						if dotTracker[i].crit == true then
							if VT - GetTime() &amp;lt;= VT2 / 2 then
								CastSpellByName(GetSpellInfo(PQ_VT),bossUnit) return true
							end
						end
					else
						if dotTracker[i].crit == false then
							if mentallyPower(34914) &amp;gt; dotTracker[i].vtPower then
								if VT - GetTime() &amp;lt;= VT2 / 2 then
									CastSpellByName(GetSpellInfo(PQ_VT),bossUnit) return true
								end
							end
							if VT - GetTime() &amp;lt;= dotTracker[i].vt_tick_every then
								CastSpellByName(GetSpellInfo(PQ_VT),bossUnit) return true
							end
						end
						if dotTracker[i].crit == true then
							if VT - GetTime() &amp;lt;= dotTracker[i].vt_tick_every then
								CastSpellByName(GetSpellInfo(PQ_VT),bossUnit) return true
							end
						end
					end
				end
			end
		else CastSpellByName(GetSpellInfo(PQ_VT),bossUnit) return true end
	end
end</Lua><RecastDelay>500</RecastDelay><Target>Custom</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mind Blast</Name><Default>false</Default><SpellID>0</SpellID><Actions>/use 10|/use 13|/use 14</Actions><Lua>local SCD = SCD
local PQ_MB = PQ_MB
local PQ_DI = PQ_DI
local PQ_DP = PQ_DP
local smartCancel = smartCancel
local TargetValidation = TargetValidation
local Hysteria_UnitInfo = Hysteria_UnitInfo

-- Mind Blast is on a CD
if not PQR_SpellAvailable(PQ_MB) then return false end

-- Don&amp;apos;t cast Mind Blast while we&amp;apos;re moving, without Divine Insight procs
if PQR_IsMoving(0.3) and UnitBuffID(&amp;quot;player&amp;quot;,PQ_DI) then
	CastSpellByName(GetSpellInfo(PQ_MB),&amp;quot;target&amp;quot;) return true
end

-- We can&amp;apos;t move and cast at the same time
if PQR_IsMoving(0.3) then return false end

-- Properly clip Mind Flay / Insanity
if not smartCancel() then return false end

-- Not enough mana to cast Mind Blast
if select(4,Hysteria_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt; select(4,GetSpellInfo(PQ_MB)) then return false end

-- If we have 3 Shadow Orbs, don&amp;apos;t cast Mind Blast if we&amp;apos;re not saving DP
if UnitPower(&amp;quot;player&amp;quot;,13) &amp;gt; 2 and PQR_SpellAvailable(PQ_DP) and not SCD then return false end

-- Cast Mind Blast
if TargetValidation(&amp;quot;target&amp;quot;,PQ_MB) then
	CastSpellByName(GetSpellInfo(PQ_MB),&amp;quot;target&amp;quot;) return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Devouring Plague</Name><Default>false</Default><SpellID>0</SpellID><Actions>/use 10|/use 13|/use 14</Actions><Lua>local SCD = SCD
local PQ_DP = PQ_DP
local smartCancel = smartCancel
local TargetValidation = TargetValidation

-- We&amp;apos;re saving DP, shoo!
if SCD then return false end

-- Devouring Plague is on CD
if not PQR_SpellAvailable(PQ_DP) then return false end

-- Properly clip Mind Flay / Insanity
if not isCleave then
	if not smartCancel() then return false end
end

-- Cast when we have 3 Orbs.
if UnitPower(&amp;quot;player&amp;quot;,13) &amp;lt; 3 then return false end

-- Cast Devouring Plague
if TargetValidation(&amp;quot;target&amp;quot;, PQ_DP) then CastSpellByName(GetSpellInfo(PQ_DP),&amp;quot;target&amp;quot;) return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Devouring Plague (High)</Name><Default>false</Default><SpellID>0</SpellID><Actions>/use 10|/use 13|/use 14</Actions><Lua>local SCD = SCD
local PQ_DP = PQ_DP
local PQ_MB = PQ_MB
local PQ_SWD = PQ_SWD
local smartCancel = smartCancel
local TargetValidation = TargetValidation
local Hysteria_UnitInfo = Hysteria_UnitInfo
local MBCD = (GetSpellCooldown(PQ_MB) + select(2,GetSpellCooldown(PQ_MB)) - GetTime())
local SWDCD = (GetSpellCooldown(PQ_SWD) + select(2,GetSpellCooldown(PQ_SWD)) - GetTime())

-- We&amp;apos;re saving DP, shoo!
if SCD then return false end

-- Properly clip Mind Flay / Insanity
if not isCleave then
	if not smartCancel() then return false end
end

-- Cast when we have 3 Orbs.
if UnitPower(&amp;quot;player&amp;quot;,13) &amp;lt; 3 then return false end

-- Cast Devouring Plague
if MBCD &amp;lt; 1.5 or (Hysteria_UnitInfo(&amp;quot;target&amp;quot;) &amp;lt; 20 and SWDCD &amp;lt; 1.5) then
	if TargetValidation(&amp;quot;target&amp;quot;, PQ_DP) then CastSpellByName(GetSpellInfo(PQ_DP),&amp;quot;target&amp;quot;) return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mind Flay</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_MF = PQ_MF
local smartCancel = smartCancel
local TargetValidation = TargetValidation

-- Can&amp;apos;t cast while moving yet!
if PQR_IsMoving(0.3) then return false end

-- Mind Flay is on CD
if not PQR_SpellAvailable(PQ_MF) then return false end

-- Properly clip Mind Flay / Insanity
if not smartCancel() then return false end

-- Cast Mind Flay
if TargetValidation(&amp;quot;target&amp;quot;,PQ_MF) then
	CastSpellByName(GetSpellInfo(PQ_MF),&amp;quot;target&amp;quot;) return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mind Flay (Insanity)</Name><Default>false</Default><SpellID>0</SpellID><Actions>/use 10|/use 13|/use 14</Actions><Lua>local PQ_MF = PQ_MF
local PQ_DP = PQ_DP
local PQ_SnI = PQ_SnI
local smartCancel = smartCancel
local TargetValidation = TargetValidation

-- Disable if we don&amp;apos;t have Solace &amp; Insanity
if not IsPlayerSpell(PQ_SnI) then return false end

-- If we don&amp;apos;t have DP up, don&amp;apos;t cast!
if not UnitDebuffID(&amp;quot;target&amp;quot;,PQ_DP,&amp;quot;PLAYER&amp;quot;) then return false end

-- Can&amp;apos;t cast while moving yet!
if PQR_IsMoving(0.3) then return false end

-- Mind Flay is on a CD
if not PQR_SpellAvailable(PQ_MF) then return false end

-- Properly clip Mind Flay / Insanity
if not smartCancel() then return false end

-- Cast Mind Flay
if TargetValidation(&amp;quot;target&amp;quot;,PQ_MF) then
	CastSpellByName(GetSpellInfo(PQ_MF),&amp;quot;target&amp;quot;) return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Dispersion</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_Disp = PQ_Disp

if not PQI_MentallyOffensiveSettings_Dispersion_enable then return false end
if not PQI:IsHotkeys(PQI_MentallyOffensiveSettings_Dispersion_key) then return false end

if PQI:IsHotkeys(PQI_MentallyOffensiveSettings_Dispersion_key)
	and not GetCurrentKeyBoardFocus() then
		if IsPlayerSpell(PQ_Disp) and PQR_SpellAvailable(PQ_Disp) then
			SpellStopCasting()
			CastSpellByName(GetSpellInfo(PQ_Disp),&amp;quot;player&amp;quot;)
			return true
		end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mind Spike (High)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_MS = PQ_MS
local PQ_SOD = PQ_SOD
local PQ_FDCL = PQ_FDCL
local smartCancel = smartCancel
local TargetValidation = TargetValidation
local SOD = select(4,UnitBuffID(&amp;quot;player&amp;quot;,PQ_SOD))

-- Disable if we don&amp;apos;t have FDCL
if not IsPlayerSpell(PQ_FDCL) then return false end

-- Mind Spike is on a CD
if not PQR_SpellAvailable(PQ_MS) then return false end

-- Properly clip Mind Flay / Insanity
if not smartCancel() then return false end

-- Don&amp;apos;t cast under 2 stacks
if SOD and SOD &amp;gt; 1 then
	if TargetValidation(&amp;quot;target&amp;quot;,PQ_MS) then
		CastSpellByName(GetSpellInfo(PQ_MS),&amp;quot;target&amp;quot;) return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mind Spike</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_MS = PQ_MS
local PQ_SOD = PQ_SOD
local PQ_FDCL = PQ_FDCL
local smartCancel = smartCancel
local TargetValidation = TargetValidation

-- Disable if we don&amp;apos;t have FDCL
if not IsPlayerSpell(PQ_FDCL) then return false end

-- Mind Spike is on a CD
if not PQR_SpellAvailable(PQ_SOD) then return false end

-- Properly clip Mind Flay / Insanity
if not smartCancel() then return false end

-- Cast Mind Spike
if UnitBuffID(&amp;quot;player&amp;quot;,PQ_SOD) then
	if TargetValidation(&amp;quot;target&amp;quot;,PQ_MS) then
		CastSpellByName(GetSpellInfo(PQ_MS),&amp;quot;target&amp;quot;) return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Auto: Vampiric Embrace</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local Hysteria_UnitInfo = Hysteria_UnitInfo
local v=PQI_MentallyDefensiveSettings_AutoVampiricEmbrace_value or 40

-- Disabled in PQInterface
if not PQI_MentallyDefensiveSettings_AutoVampiricEmbrace_enable then return false end

if IsPlayerSpell(15286) and PQR_SpellAvailable(15286) then
	if Hysteria_UnitInfo(&amp;quot;player&amp;quot;) &amp;lt;= v and select(5,Hysteria_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 2 then
		SpellCancelQueuedSpell()
		CastSpellByName(GetSpellInfo(15286),&amp;quot;player&amp;quot;)
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mind Sear</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_MSear = PQ_MSear

if GetCurrentKeyBoardFocus() then return false end
if not PQI_MentallyOffensiveSettings_MindSear_enable then return false end
if not PQI:IsHotkeys(PQI_MentallyOffensiveSettings_MindSear_key) then return false end

if TargetValidation(&amp;quot;target&amp;quot;,PQ_MSear) or UnitIsFriend(&amp;quot;target&amp;quot;,&amp;quot;player&amp;quot;) then
	CastSpellByName(GetSpellInfo(PQ_MSear),&amp;quot;target&amp;quot;) return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Level 15 Talent</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if GetCurrentKeyBoardFocus() then return false end
if not PQI_MentallyOffensiveSettings_Level15Talent_enable then return false end
if not PQI:IsHotkeys(PQI_MentallyOffensiveSettings_Level15Talent_key) then return false end

-- Void Tendrils
if IsPlayerSpell(108920) and PQR_SpellAvailable(108920) then
	SpellStopCasting()
	CastSpellByName(GetSpellInfo(108920),&amp;quot;player&amp;quot;)
	return true
end

-- Psyfiend
if IsPlayerSpell(108921) and PQR_SpellAvailable(108921) then
	SpellStopCasting()
	CastSpellByID(108921)
	if SpellIsTargeting() then SpellCancelQueuedSpell() CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadow Word: Death</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SCD = SCD
local PQ_DP = PQ_DP
local PQ_SnI = PQ_SnI
local PQ_SWD = PQ_SWD
local smartCancel = smartCancel
local TargetValidation = TargetValidation
local Hysteria_UnitInfo = Hysteria_UnitInfo

-- Properly clip Mind Flay / Insanity
if not isCleave then
	if not smartCancel() then return false end
end

-- Don&amp;apos;t double tap if we have Solace &amp; Insanity
if IsPlayerSpell(PQ_SnI) then
	if UnitDebuffID(&amp;quot;target&amp;quot;,PQ_DP,&amp;quot;PLAYER&amp;quot;) then return false end
end

-- Don&amp;apos;t Shadow Word: Death @ 3 Shadow Orbs.. Silly you!
if select(5,Hysteria_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 2 and PQR_SpellAvailable(PQ_DP) and not SCD then return false end

-- We can&amp;apos;t activate above 20% HP anyway..
if Hysteria_UnitInfo(&amp;quot;target&amp;quot;) &amp;gt; 20 then return false end

if PQI_MentallyOffensiveSettings_DoubleShadowWordDeath_enable then
	-- Cast Shadow Word: Death
	if TargetValidation(&amp;quot;target&amp;quot;,PQ_SWD) then CastSpellByName(GetSpellInfo(PQ_SWD),&amp;quot;target&amp;quot;) return true end
else
	if not deathTimer then deathTimer = 0 end
	
	if deathTimer - GetTime() &amp;lt;= 0 or deathTimer &amp;gt;= 6 - GetTime() then
		if TargetValidation(&amp;quot;target&amp;quot;,PQ_SWD) then
			deathTimer = GetTime()
			CastSpellByName(GetSpellInfo(PQ_SWD),&amp;quot;target&amp;quot;) return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mind Spike (Shadow Locked)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_MS = PQ_MS
local PQ_SWP = PQ_SWP
local smartCancel = smartCancel
local TargetValidation = TargetValidation
local ShadowCD = GetSpellCooldown(PQ_SWP) + select(2,GetSpellCooldown(PQ_SWP)) - GetTime()

-- Properly clip Mind Flay / Insanity
if not smartCancel() then return false end

-- For some reason, we&amp;apos;re shadow locked!
if not PQR_SpellAvailable(PQ_SWP) and ShadowCD &amp;gt; 1 then
	if TargetValidation(&amp;quot;target&amp;quot;,PQ_MS) then
		CastSpellByName(GetSpellInfo(PQ_MS),&amp;quot;target&amp;quot;) return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Trigger: Hold Cooldowns</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Cooldown Timer function
if not SCDtimer then SCDtimer = 0 end
if not SCD then SCD = false end

if SCD then
	PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Cooldown Hold: Enabled&amp;quot;, nil, &amp;quot;DC143C&amp;quot;)
else
	PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Cooldown Hold: Disabled&amp;quot;, nil, &amp;quot;79BAEC&amp;quot;)
end

if PQI_MentallyOffensiveSettings_ToggleHoldCooldown_enable
	and not GetCurrentKeyBoardFocus()
	and PQI:IsHotkeys(PQI_MentallyOffensiveSettings_ToggleHoldCooldown_key)
	and GetTime() - SCDtimer &amp;gt; 1
then
	SCDtimer = GetTime()
	if SCD then
		SCD = false
		PQR_WriteToChat(&amp;quot;|cff347C2CCooldown Hold: |cff79BAECDisabled|cffffffff&amp;quot;, &amp;quot;Notice&amp;quot;)
	else
		SCD = true
		PQR_WriteToChat(&amp;quot;|cff347C2CCooldown Hold: |cffDC143CEnabled|cffffffff&amp;quot;, &amp;quot;Notice&amp;quot;)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></PRIEST>